// Utilities
//
// Transitions
@import "bootstrap/scss/transitions";

// Static utilities
@import "static/background";
@import "static/gradient";
@import "static/filter";
@import "static/transform";
@import "static/animation";
@import "static/height-calc";
@import "static/helpers";

// Bootstrap utilities
@import "bootstrap/scss/utilities";

// Custom utilities
$utilities: map-merge($utilities, (
  "viewport-height": null,
  "min-viewport-height": null,
  "min-viewport-width": null,
  "viewport-width": null,
  "opacity": (
    property: opacity,
    values: $utilities-opacity-values
  ),
  "zindex": (
    property: z-index,
    class: overlap,
    values: $utilities-zindex-values
  ),

  // Border radius
  "rounded": (
    property: border-radius,
    class: rounded,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-top": (
    property: border-top-left-radius border-top-right-radius,
    class: rounded-top,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-end": (
    property: border-top-right-radius border-bottom-right-radius,
    class: rounded-end,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-bottom": (
    property: border-bottom-right-radius border-bottom-left-radius,
    class: rounded-bottom,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-start": (
    property: border-bottom-left-radius border-top-left-radius,
    class: rounded-start,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-top-start": (
    property: border-top-left-radius,
    class: rounded-top-start,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-top-end": (
    property: border-top-right-radius,
    class: rounded-top-end,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-bottom-end": (
    property: border-bottom-right-radius,
    class: rounded-bottom-end,
    responsive: true,
    values: $utilities-border-radius
  ),
  "rounded-bottom-start": (
    property: border-bottom-left-radius,
    class: rounded-bottom-start,
    responsive: true,
    values: $utilities-border-radius
  ),

  // Border
  "border-width": (
    css-var: true,
    css-variable-name: border-width,
    class: border,
    values: $utilities-border-widths
  ),
  "border-opacity": (
    css-var: true,
    class: border-opacity,
    values: $utilities-opacity-values
  ),
  "border-color": (
    property: border-color,
    class: border,
    state: hover focus,
    local-vars: (
      "border-opacity": 1
    ),
    values: $utilities-border-color-values
  ),
  "static-border-color": (
    property: border-color,
    class: border,
    values: $utilities-static-border-color-values
  ),
  "border-style": (
    css-var: true,
    css-variable-name: border-style,
    class: border,
    values: solid dashed dotted double groove none
  ),
  "border": (
    property: border,
    responsive: true,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0,
    )
  ),
  "border-top": (
    property: border-top,
    class: border-top,
    responsive: true,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0,
    )
  ),
  "border-end": (
    property: border-right,
    class: border-end,
    responsive: true,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0,
    )
  ),
  "border-bottom": (
    property: border-bottom,
    class: border-bottom,
    responsive: true,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0,
    )
  ),
  "border-start": (
    property: border-left,
    class: border-start,
    responsive: true,
    values: (
      null: var(--#{$prefix}border-width) var(--#{$prefix}border-style) var(--#{$prefix}border-color),
      0: 0,
    )
  ),

  // Cursor
  "cursor": (
    property: cursor,
    class: cursor,
    values: auto pointer wait text,
  ),

  // Fonts and Text
  "font-family": (
    property: font-family,
    class: font,
    values: $utilities-font-family-values
  ),
  "font-size": (
    rfs: true,
    property: font-size,
    class: text,
    values: $utilities-font-size-values
  ),
  "font-style": (
    property: font-style,
    class: font,
    values: italic normal
  ),
  "font-weight": (
    property: font-weight,
    class: font,
    values: $utilities-font-weight-values
  ),
  "text-transform": (
    property: text-transform,
    class: text,
    values: lowercase uppercase capitalize,
  ),
  "text-align": (
    property: text-align,
    class: text,
    responsive: true,
    values: $utilities-text-align-values
  ),
  "text-decoration": (
    property: text-decoration,
    class: text,
    values: $utilities-text-decoration-values
  ),
  "line-height": (
    property: line-height,
    class: lh,
    values: $utilities-line-height-values
  ),
  "letter-spacing": (
    property: letter-spacing,
    class: ls,
    values: $utilities-letter-spacing-values
  ),
  "color": (
    property: color,
    class: text,
    state: hover,
    local-vars: (
      "text-opacity": 1
    ),
    values: $utilities-text-colors
  ),
  "static-color": (
    property: color,
    class: text,
    values: $utilities-static-text-colors
  ),
  "text-opacity": (
    css-var: true,
    class: text-opacity,
    state: hover,
    values: $utilities-opacity-values
  ),

  // Background
  "background-color": (
    property: background-color,
    class: bg,
    state: hover,
    local-vars: (
      "bg-opacity": 1
    ),
    values: $utilities-bg-colors
  ),
  "surface-background-color": (
    property: background-color,
    class: bg,
    local-vars: (
      "bg-opacity": 1
    ),
    values: $utilities-surface-bg-colors
  ),
  "static-background-color": (
    property: background-color,
    class: bg,
    values: $utilities-static-bg-colors
  ),
  "bg-opacity": (
    css-var: true,
    class: bg-opacity,
    state: hover,
    values: $utilities-opacity-values
  ),
  "background-size": (
    property: background-size,
    class: bg,
    values: auto cover contain
  ),
  "background-clip": (
    property: background-clip,
    class: bg-clip,
    values: (
      border: border-box,
      padding: padding-box,
      content: content-box,
      text: text
    )
  ),

  // Shadow
  "shadow": (
    property: box-shadow,
    class: shadow,
    responsive: true,
    state: hover focus,
    values: $utilities-shadows
  ),
  "soft-shadow": (
    property: box-shadow,
    class: shadow-soft,
    responsive: true,
    state: hover focus,
    values: $utilities-soft-shadows
  ),

  // Widths
  "width": (
    property: width,
    class: w,
    responsive: true,
    values: map-collect(
      $spacers,
      $percentage-sizers,
      $screen-widths,
      (
        auto: auto,
        full: 100%,
        screen: 100vw,
        min: min-content,
        max: max-content
      )
    )
  ),
  "min-width": (
    property: min-width,
    class: min-w,
    responsive: true,
    values: (
      0: 0,
      full: 100%,
      min: min-content,
      max: max-content
    )
  ),
  "max-width": (
    property: max-width,
    class: max-w,
    responsive: true,
    values: map-collect(
      $screen-widths,
      (
        0: 0,
        full: 100%,
        read: 65ch,
        min: min-content,
        max: max-content
      )
    ),
  ),

  // Heights
  "height": (
    property: height,
    class: h,
    responsive: true,
    values: map-collect(
      $spacers,
      $percentage-sizers,
      (
          px: 1px,
          auto: auto,
          full: 100%,
          screen: 100vh
      )
    )
  ),
  "min-height": (
    property: min-height,
    class: min-h,
    responsive: true,
    values: (
      0: 0,
      full: 100%,
      screen: 100vh
    )
  ),
  "max-height": (
    property: max-height,
    class: max-h,
    responsive: true,
    values: map-collect(
      $spacers,
      (
        px: 1px,
        full: 100%,
        screen: 100vh
      )
    )
  ),

  // Position
  "position": (
    property: position,
    responsive: true,
    values: static relative absolute fixed sticky,
  ),
  "top": (
    property: top,
    responsive: true,
    values: map-merge($spacers, $position-values)
  ),
  "end": (
    property: right,
    class: end,
    responsive: true,
    values: map-merge($spacers, $position-values)
  ),
  "bottom": (
    property: bottom,
    class: bottom,
    responsive: true,
    values: map-merge($spacers, $position-values)
  ),
  "start": (
    property: left,
    class: start,
    responsive: true,
    values: map-merge($spacers, $position-values)
  ),

  // Flex
  "flex": (
    property: flex,
    responsive: true,
    values: (
      1: 1 1 0%,
      fill: 1 1 auto,
      initial: 0 1 auto,
      none: none
    )
  ),
  "align-content": (
    property: align-content,
    responsive: true,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly,
      stretch: stretch
    )
  ),
  "place-content": (
    property: place-content,
    responsive: true,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly,
      stretch: stretch,
    )
  ),

  // Overflow
  "overflow": (
    property: overflow,
    responsive: true,
    values: auto hidden visible scroll
  ),
  "overflow-x": (
    property: overflow-x,
    responsive: true,
    values: auto hidden visible scroll
  ),
  "overflow-y": (
    property: overflow-y,
    responsive: true,
    values: auto hidden visible scroll
  ),

  // Transitions
  "transition-property": (
    property: transition-property,
    class: transition,
    responsive: true,
    values: (
      null: $transition-property,
      none: none,
      all: all,
      colors: $transition-property-colors,
      opacity: opacity,
      shadow: box-shadow,
      transform: transform,
    ),
  ),
  "transition-timing-function": (
    property: transition-timing-function,
    class: ease,
    responsive: true,
    values: (
      base: $transition-timing-function,
      linear: linear,
      in: $transition-in-timing-function,
      out: $transition-out-timing-function,
      in-out: $transition-in-out-timing-function,
    )
  ),
  "transition-duration": (
    property: transition-duration,
    class: duration,
    values: (
      base: 150ms,
      75: 75ms,
      100: 100ms,
      150: 150ms,
      200: 200ms,
      300: 300ms,
      500: 500ms,
      700: 700ms,
      1000: 1000ms,
    )
  ),
  "transition-delay": (
    property: transition-delay,
    class: delay,
    values: (
      75: 75ms,
      100: 100ms,
      150: 150ms,
      200: 200ms,
      300: 300ms,
      500: 500ms,
      700: 700ms,
      1000: 1000ms,
    )
  ),
  "animation": (
    property: animation,
    values: (
      none: none,
      spin: spin 1s linear infinite,
      ping: ping 1s cubic-bezier(0, 0, 0.2, 1) infinite,
      pulse: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite,
      bounce: bounce 1s infinite,
      slide-left: slideLeft 3s infinite,
      slide-right: slideRight 3s infinite,
      move-slow-left: slideLeft 15s linear infinite,
      move-slow-right: slideRight 15s linear infinite,
    )
  ),

  // Filter
  "blur": (
    property: --#{$variable-prefix}blur,
    class: blur,
    values: (
      5: 5px,
      10: 10px,
      25: 25px,
      50: 50px,
      75: 75px,
      100: 100px,
      125: 125px,
      150: 150px,
      200: 200px
    )
  ),

  // Transforms
  "transform": (
    property: transform,
    values: none,
    responsive: true
  ),
  "transform-origin": (
    property: transform-origin,
    class: origin,
    values: (
      center: center,
      top: top,
      top-right: top right,
      right: right,
      bottom-right: bottom right,
      bottom: bottom,
      bottom-left: bottom left,
      left: left,
      top-left: top left
    )
  ),
  "scale": (
    property: --#{$variable-prefix}scale-x --#{$variable-prefix}scale-y,
    class: scale,
    state: hover,
    responsive: true,
    values: $utilities-scale-values
  ),
  "scale-y": (
    property: --#{$variable-prefix}-scale-y,
    class: scale-y,
    responsive: true,
    values: $utilities-scale-values
  ),
  "scale-x": (
    property: --#{$variable-prefix}-scale-x,
    class: scale-x,
    responsive: true,
    values: $utilities-scale-values
  ),
  "rotate":  (
    property: --#{$variable-prefix}rotate,
    class: rotate,
    state: hover,
    responsive: true,
    values: $utilities-rotate-values
  ),
  "negative-rotate":  (
    property: --#{$variable-prefix}rotate,
    class: rotate,
    state: hover,
    responsive: true,
    values: negativify-map($utilities-rotate-values)
  ),
  "rotate-y":  (
    property: --#{$variable-prefix}rotate-y,
    class: rotate-y,
    responsive: true,
    values: $utilities-rotate-values
  ),
  "negative-rotate-y": (
    property: --#{$variable-prefix}rotate-y,
    class: rotate-y,
    state: hover,
    responsive: true,
    values: negativify-map($utilities-rotate-values)
  ),
  "rotate-x":  (
    property: --#{$variable-prefix}rotate-x,
    class: rotate-x,
    responsive: true,
    values: $utilities-rotate-values
  ),
  "negative-rotate-x": (
    property: --#{$variable-prefix}rotate-x,
    class: rotate-x,
    responsive: true,
    values: negativify-map($utilities-rotate-values)
  ),
  "perspective": (
    property: --#{$variable-prefix}perspective,
    class: perspective,
    responsive: true,
    values: $utilities-perspective-values
  ),
  "translate-y": (
    property: --#{$variable-prefix}translate-y,
    class: translate-y,
    state: hover,
    responsive: true,
    values: $utilities-translate-values
  ),
  "negative-translate-y": (
    property: --#{$variable-prefix}translate-y,
    class: translate-y,
    state: hover,
    responsive: true,
    values: negativify-map($utilities-translate-values)
  ),
  "translate-x": (
    property: --#{$variable-prefix}translate-x,
    class: translate-x,
    state: hover,
    responsive: true,
    values: $utilities-translate-values
  ),
  "negative-translate-x": (
    property: --#{$variable-prefix}translate-x,
    class: translate-x,
    state: hover,
    responsive: true,
    values: negativify-map($utilities-translate-values)
  ),
  "skew-y": (
    property: --#{$variable-prefix}skew-y,
    class: skew-y,
    values: $utilities-skew-values
  ),
  "negative-skew-y": (
    property: --#{$variable-prefix}skew-y,
    class: skew-y,
    values: negativify-map($utilities-skew-values)
  ),
  "skew-x": (
    property: --#{$variable-prefix}skew-x,
    class: skew-x,
    values: $utilities-skew-values
  ),
  "negative-skew-x": (
    property: --#{$variable-prefix}skew-x,
    class: skew-x,
    values: negativify-map($utilities-skew-values)
  )
));
